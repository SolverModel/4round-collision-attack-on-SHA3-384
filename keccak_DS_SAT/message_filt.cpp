#include "keccak_permutation.h"
#include <stdio.h>
#include <unistd.h>
uint64_t hash_table[16777216][13]={0};
uint8_t hash_flag[16777216]={0};
string add_impossible_point(int* var_list,int* point,int length)
{
    string result="";
    for(int i=0;i<length;i++)
    {
        if(point[i]==-1)
        {
            continue;
        }
        result+=to_string(int(pow(-1,point[i]))*var_list[i]);
        result+=" ";
    }
    result+="0";
    return result;
}

int Xor_sum(int* var_list,int result_bit,int length,string* Clause)
{
    int true_length=0;
    int true_varlist[length]={0};
    for(int i=0;i<length;i++)
    {
        if(var_list[i]!=-1 && var_list[i]!=0)
        {
            true_varlist[true_length]=var_list[i];
            true_length++;
        }
        else
        {
            result_bit=result_bit^(-(var_list[i]));
        }
    }
    int impossible_point_length=(int)(pow(2,true_length-1));
    for(int i=0;i<impossible_point_length;i++)
    {
        int point[true_length]={0};
        bin_to_intvector(i,true_length-1,point);
        for(int j=0;j<true_length-1;j++)
        {
            point[true_length-1]^=point[j];
        }
        point[true_length-1]^=(1^result_bit);
        Clause[i]=add_impossible_point(true_varlist,point,true_length);
    }
    return impossible_point_length;
}

void construct_model(uint8_t* _A,uint8_t* _A_p,string file_path)
{
    int var_cnt=1;
    int clause_cnt=0;
    int Sigma[320]={0};
    int Sigma_p[320]={0};
    int A[1600]={0};
    int A_p[1600]={0};
    int B[1600]={0};
    int B_p[1600]={0};
    int C[1600]={0};
    string clause[41088];
    //Padding
    //Padding
    for(int i=0;i<1600;i++)
    {
        A[i]=(int)(_A[i]);
        A_p[i]=(int)(_A_p[i]);
        A_p[i]^=A[i];
        A[i]*=(-1);
        A_p[i]*=(-1);
    }
    for(int i=0;i<828;i++)
    {
        A[i]=var_cnt;
        var_cnt++;
    }
    //mody
    for(int i=0;i<condition_len;i++)
    {
        A_p[diff_condition[i][0]]=(-1)*(int(pow(A_p[diff_condition[i][1]],2))^diff_condition[i][2]);
    }
    //mody
    int tmp_index=0;
    for(int i=0;i<828;i++)
    {
        if(i==diff_condition[tmp_index][0])
        {
            tmp_index++;
            continue;
        }
        A_p[i]=var_cnt;
        var_cnt++;
    }
    for(int i=0;i<320;i++)
    {
        Sigma[i]=var_cnt;
        var_cnt++;
        int x=i/64;
        int z=i%64;
        int i0=get_locate(x,0,z);int i1=get_locate(x,1,z);int i2=get_locate(x,2,z);int i3=get_locate(x,3,z);int i4=get_locate(x,4,z);
        int var_list[6]={Sigma[i],A[i0],A[i1],A[i2],A[i3],A[i4]};
        clause_cnt+=Xor_sum(var_list,0,6,clause+clause_cnt);
    }
    cout<<clause_cnt<<endl;
    for(int i=0;i<320;i++)
    {
        Sigma_p[i]=var_cnt;
        var_cnt++;
        int x=i/64;
        int z=i%64;
        int i0=get_locate(x,0,z);int i1=get_locate(x,1,z);int i2=get_locate(x,2,z);int i3=get_locate(x,3,z);int i4=get_locate(x,4,z);
        int var_list[6]={Sigma_p[i],A_p[i0],A_p[i1],A_p[i2],A_p[i3],A_p[i4]};
        clause_cnt+=Xor_sum(var_list,0,6,clause+clause_cnt);
    }
    cout<<clause_cnt<<endl;
    for(int i=0;i<1600;i++)
    {
        B[i]=var_cnt;
        var_cnt++;
    }
    for(int i=0;i<1600;i++)
    {
        B_p[i]=var_cnt;
        var_cnt++;
    }
    //Linear
    for(int i=0;i<1600;i++)
    {
        int x=pusai0(i);int y=pusai1(i);int z=pusai2(i);
        int left_index=phi1(i);
        int right_index=phi2(i);
        int var_list[4]={B[sigma(i)],A[i],Sigma[left_index],Sigma[right_index]};
        clause_cnt+=Xor_sum(var_list,0,4,clause+clause_cnt);
    }
    cout<<clause_cnt<<endl;
    for(int i=0;i<1600;i++)
    {
        int x=pusai0(i);int y=pusai1(i);int z=pusai2(i);
        int left_index=phi1(i);
        int right_index=phi2(i);
        int var_list[4]={B_p[sigma(i)],A_p[i],Sigma_p[left_index],Sigma_p[right_index]};
        clause_cnt+=Xor_sum(var_list,0,4,clause+clause_cnt);
    }
    cout<<clause_cnt<<endl;
    //Nolinear
    for(int i=0;i<1600;i++)
    {
        C[i]=var_cnt;
        var_cnt++;
    }
    for(int x=0;x<5;x++)
    {
        for(int y=0;y<5;y++)
        {
            for(int z=0;z<64;z++)
            {
                int a=C[get_locate(x,y,z)];
                int b=B[get_locate((x+1)%5,y,z)];
                int c=B[get_locate((x+2)%5,y,z)];
                int d=B_p[get_locate((x+1)%5,y,z)];
                int e=B_p[get_locate((x+2)%5,y,z)];
                int var_list[5]={b,c,d,e,a};
                int point0[5]={0,1,-1,1,0};
                int point1[5]={-1,1,1,0,0};
                int point2[5]={0,-1,0,1,0};
                int point3[5]={1,0,1,1,0};
                int point4[5]={-1,-1,0,0,1};
                int point5[5]={-1,0,-1,0,1};
                int point6[5]={1,-1,0,-1,1};
                int point7[5]={0,0,1,-1,1};
                int point8[5]={1,1,-1,1,1};
                clause[clause_cnt]=add_impossible_point(var_list,point0,5);
                clause[clause_cnt+1]=add_impossible_point(var_list,point1,5);
                clause[clause_cnt+2]=add_impossible_point(var_list,point2,5);
                clause[clause_cnt+3]=add_impossible_point(var_list,point3,5);
                clause[clause_cnt+4]=add_impossible_point(var_list,point4,5);
                clause[clause_cnt+5]=add_impossible_point(var_list,point5,5);
                clause[clause_cnt+6]=add_impossible_point(var_list,point6,5);
                clause[clause_cnt+7]=add_impossible_point(var_list,point7,5);
                clause[clause_cnt+8]=add_impossible_point(var_list,point8,5);
                clause_cnt+=9;
            }
        }
    }
    cout<<clause_cnt<<endl;
    //Differential
    for(int x=0;x<5;x++)
    {
        for(int y=0;y<5;y++)
        {
            for(int z=0;z<64;z++)
            {
                int i1=get_locate(x,y,z);
                int var_list[2]={C[i1],B_p[i1]};
                clause_cnt+=Xor_sum(var_list,(int)(a1[i1]),2,clause+clause_cnt);
            }
        }
    }
    FILE *f=fopen(file_path.data(),"w");
    fprintf(f,"p cnf %d %d\n",var_cnt-1,clause_cnt);
    printf("%d %d\n",var_cnt,clause_cnt);
    for(int i=0;i<clause_cnt;i++)
    {
        fprintf(f,"%s\n",clause[i].data());
    }
    fclose(f);
}
uint64_t get_index(uint8_t* M)
{
    uint8_t condition[24]={0};
    condition[0]=M[863]^M[1183];
    condition[1]=M[864]^M[1184];
    condition[2]=M[877]^M[1197];
    condition[3]=M[878]^M[1198];
    condition[4]=M[879]^M[1199];
    condition[5]=M[880]^M[1200];
    condition[6]=M[881]^M[1201];
    condition[7]=M[882]^M[1202];
    condition[8]=M[883]^M[1203];
    condition[9]=M[884]^M[1204];
    condition[10]=M[885]^M[1205];
    condition[11]=M[934]^M[1574];
    condition[12]=M[935]^M[1575];
    condition[13]=M[995]^M[1315];
    condition[14]=M[996]^M[1316];
    condition[15]=M[997]^M[1317];
    condition[16]=M[1032]^M[1352];
    condition[17]=M[1033]^M[1353];
    condition[18]=M[1034]^M[1354];
    condition[19]=M[1035]^M[1355];
    condition[20]=M[1036]^M[1356];
    condition[21]=M[1144]^M[1464];
    condition[22]=M[1145]^M[1465];
    condition[23]=M[1146]^M[1466];
    uint64_t index=0;
    for(int i=0;i<24;i++)
    {
        index+=(uint64_t(condition[i]))*(uint64_t(pow(2,i)));
    }
    return index;
}

uint64_t vector_to_bin64(uint8_t* x)
{
    uint64_t result=0;
    for(int i=63;i>=0;i--)
    {
        result+=x[i]*(uint64_t)(pow(2,63-i));
    }
    return result;
}

int main(int argc,char* argv[])
{
    srand(time(NULL));
    for(uint64_t i=0;i<pow(2,15);i++)
    {
        for(uint64_t j=0;j<pow(2,25);j++)
        {
            if(j%(uint64_t)(pow(2,15))==0)
            {
                printf("%ld\n",j);
            }
            uint64_t rand_num_list[13]={0};
            uint8_t M1[1600]={0}; 
            // uint8_t M1[1600]={0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1};
            // uint8_t M1_p[1600]={1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1};

            uint8_t hash_value[1600]={0};
            for(uint64_t k=0;k<13;k++)
            {
                uint64_t rand_num0=(uint64_t)(rand());
                uint64_t rand_num1=(uint64_t)(rand());
                uint64_t rand_num2=(uint64_t)(rand());
                uint64_t rand_num=(rand_num0<<33)+(rand_num1<<2)+(rand_num2%4);
                bin64_to_vector(rand_num,M1+k*64);
                rand_num_list[k]=rand_num;
            }
            f_4(M1,hash_value);
            uint64_t index=get_index(hash_value);
            //DS------------------------
            if(hash_flag[index]==1)
            // if(1==1)
            {
                uint8_t _A[1600]={0};
                uint8_t _A_p[1600]={0};
                uint8_t M1_p[1600]={0};
                for(int l=0;l<13;l++)
                {
                    bin64_to_vector(hash_table[index][l],M1_p+l*64);
                }
                int flag=DS_39bit(M1,M1_p,_A,_A_p);
                //SAT-----------------------------
                if(flag==1)
                {
                    // for(int l=0;l<1600;l++)
                    // {
                    //     printf("%d,",M1[l]);
                    // }
                    // printf("\n");
                    // for(int l=0;l<1600;l++)
                    // {
                    //     printf("%d,",M1_p[l]);
                    // }
                    // break;
                    // printf("1111111111111\n");
                    construct_model(_A,_A_p,"test_sat.cnf");
                    system("(time ../../build/kissat -q test_sat.cnf) > result.txt 2>&1");
                    FILE *f =fopen("result.txt","r");
                    char satresult[2];
                    char sat_result[14];
                    int num=fscanf(f,"%s%s",satresult,sat_result);
                    fclose(f);
                    if(sat_result[0]=='S')
                    {
                        f=fopen("message","a+");
                        for(int i=0;i<1600;i++)
                        {
                            fprintf(f,"%d,",M1[i]);
                        }
                        fprintf(f,"\n");
                        for(int i=0;i<1600;i++)
                        {
                            fprintf(f,"%d,",M1_p[i]);
                        }
                        fprintf(f,"\n");
			fclose(f);
                    }
                }
                //SAT-----------------------------
            }
            //DS-------------------------
            memcpy(hash_table[index],rand_num_list,13*8);
            hash_flag[index]=1;
        }
        // fclose(f);
    }
}
